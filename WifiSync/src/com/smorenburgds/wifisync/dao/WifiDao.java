package com.smorenburgds.wifisync.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.smorenburgds.wifisync.dao.Wifi;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WIFI.
*/
public class WifiDao extends AbstractDao<Wifi, Long> {

    public static final String TABLENAME = "WIFI";

    /**
     * Properties of entity Wifi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property RawData = new Property(3, String.class, "rawData", false, "RAW_DATA");
    };


    public WifiDao(DaoConfig config) {
        super(config);
    }
    
    public WifiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WIFI' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'PASSWORD' TEXT," + // 2: password
                "'RAW_DATA' TEXT);"); // 3: rawData
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WIFI'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Wifi entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String rawData = entity.getRawData();
        if (rawData != null) {
            stmt.bindString(4, rawData);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Wifi readEntity(Cursor cursor, int offset) {
        Wifi entity = new Wifi( // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // rawData
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Wifi entity, int offset) {
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRawData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    


    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

	@Override
	protected Long getKey(Wifi arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected Long updateKeyAfterInsert(Wifi arg0, long arg1) {
		// TODO Auto-generated method stub
		return null;
	}
    
}
